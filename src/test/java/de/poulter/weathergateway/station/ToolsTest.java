/*
 * Weathergateway
 *
 * Copyright (C) 2019 Christian Poulter
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */

package de.poulter.weathergateway.station;

import static org.junit.Assert.assertEquals;
import static de.poulter.weathergateway.station.StationBinaryTools.stringToByteArray;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.util.Arrays;

import org.junit.Test;

/**
 * @author Christian Poulter <devel@poulter.de>
 */
public class ToolsTest {

    @Test
    public void testCreateCommand() throws IOException {
        assertEquals("0xff 0xff 0x12 0x00 0x04 0x16", StationBinaryTools.byteArrayToString(StationBinaryTools.COMMAND_SEARCH));
        assertEquals("0xff 0xff 0x0b 0x00 0x06 0x04 0x04 0x19", StationBinaryTools.byteArrayToString(StationBinaryTools.COMMAND_DATA));
        assertEquals("0xff 0xff 0x50 0x00 0x04 0x54", StationBinaryTools.byteArrayToString(StationBinaryTools.COMMAND_VERSION));
    }
        
    @Test
    public void testParseSingle() throws IOException {
        byte[] data = StationBinaryTools.stringToByteArray("0xff 0xff 0x0b 0x00 0x08 0x04 0x00 0x17");
        byte[] result = StationBinaryTools.parse(data, 0x0b);
        assertEquals("0x04", StationBinaryTools.byteArrayToString(result));

        data = StationBinaryTools.stringToByteArray("0xff 0xff 0x12 0x00 0x27 0xbc 0xdd 0xc2 0x9c 0x8e 0xb2 0x0a 0x00 0x00 0xca 0xaf 0xc8 0x14 0x45 0x61 0x73 0x79 0x57 0x65 0x61 0x74 0x68 0x65 0x72 0x2d 0x57 0x49 0x46 0x49 0x38 0x45 0x42 0x32 0x7e 0x01 0x02 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00");
        result = StationBinaryTools.parse(data, 0x12);
        //             M0   M1   M2   M3   M4   M5   IP0  IP1  IP2  IP3  
        assertEquals("0xbc 0xdd 0xc2 0x9c 0x8e 0xb2 0x0a 0x00 0x00 0xca " + 
        //             P1   P2   L    0    1    2    3    4    5    6   
                     "0xaf 0xc8 0x14 0x45 0x61 0x73 0x79 0x57 0x65 0x61 " +
        //             7    8    9    A    B    C    D    E    F    10
                     "0x74 0x68 0x65 0x72 0x2d 0x57 0x49 0x46 0x49 0x38 " +
        //             11   12
                     "0x45 0x42", StationBinaryTools.byteArrayToString(result));
    
        int nameLength = StationBinaryTools.fromByteUnsigned(result, 12) - 1;
        int nameLengthFromStart = 13 + nameLength;
        assertEquals(19, nameLength);
        assertEquals(32, result.length);
        assertFalse(result.length < nameLengthFromStart);
        
        String name = new String(Arrays.copyOfRange(result, 13, nameLengthFromStart));
        assertEquals("EasyWeather-WIFI8EB", name);
    }
    
    @Test
    public void testParseDouble() throws IOException {
        byte[] data = StationBinaryTools.stringToByteArray("0xff 0xff 0x0b 0x00 0x50 0x04 0x01 0x00 0xd2 0x02 0x00 0x58 0x03 0x00 0x26 0x04 0x00 0x58 0x05 0x00 0x58 0x06 0x32 0x07 0x47 0x08 0x26 0x0e 0x09 0x27 0x9e 0x0a 0x00 0x96 0x0b 0x00 0x0d 0x0c 0x00 0x14 0x0e 0x00 0x00 0x00 0x00 0x10 0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x4a 0x12 0x00 0x00 0x00 0x4a 0x13 0x00 0x00 0x00 0x98 0x14 0x00 0x00 0x05 0x28 0x15 0x00 0x03 0x0d 0x0e 0x16 0x01 0x5e 0x17 0x01 0xfc 0x53");
        byte[] result = StationBinaryTools.parse(data, 0x0b, 0x04);
        assertEquals("0x01 0x00 0xd2 0x02 0x00 0x58 0x03 0x00 0x26 0x04 0x00 0x58 0x05 0x00 0x58 0x06 0x32 0x07 0x47 0x08 0x26 0x0e 0x09 0x27 0x9e 0x0a 0x00 0x96 0x0b 0x00 0x0d 0x0c 0x00 0x14 0x0e 0x00 0x00 0x00 0x00 0x10 0x00 0x00 0x00 0x00 0x11 0x00 0x00 0x00 0x4a 0x12 0x00 0x00 0x00 0x4a 0x13 0x00 0x00 0x00 0x98 0x14 0x00 0x00 0x05 0x28 0x15 0x00 0x03 0x0d 0x0e 0x16 0x01 0x5e 0x17 0x01", StationBinaryTools.byteArrayToString(result));

        data = StationBinaryTools.stringToByteArray("0xff 0xff 0x0b 0x00 0x08 0x04 0x01 0x00 0x05 0x1d");
        result = StationBinaryTools.parse(data, 0x0b, 0x04);
        assertEquals("0x01 0x00", StationBinaryTools.byteArrayToString(result));

        try {
            data = StationBinaryTools.stringToByteArray("0xff 0xff 0x0b 0x00 0x08 0x04 0x19");
            result = StationBinaryTools.parse(data, 0x0b, 0x04);
            fail();
        } catch (IOException ex) {
            assertEquals("Message is to short: 7", ex.getMessage());
        }
        
        try {
            data = StationBinaryTools.stringToByteArray("0xfe 0xff 0x0b 0x00 0x08 0x04 0x01 0x00 0x01 0x19");
            result = StationBinaryTools.parse(data, 0x0b, 0x04);
            fail();
        } catch (IOException ex) {
            assertEquals("Invalid magic values: feff", ex.getMessage());
        }

        try {
            data = StationBinaryTools.stringToByteArray("0xff 0xff 0x0b 0x00 0x09 0x04 0x01 0x00 0x01 0x19");
            result = StationBinaryTools.parse(data, 0x0b, 0x04);
            fail();
        } catch (IOException ex) {
            assertEquals("Message to short: 10, expected 11", ex.getMessage());
        }
        
        try {
            data = StationBinaryTools.stringToByteArray("0xff 0xff 0x0c 0x00 0x08 0x04 0x01 0x00 0x01 0x19");
            result = StationBinaryTools.parse(data, 0x0b, 0x04);
            fail();
        } catch (IOException ex) {
            assertEquals("Invalid command: c <-> b", ex.getMessage());
        }
        
        try {
            data = StationBinaryTools.stringToByteArray("0xff 0xff 0x0b 0x00 0x08 0x02 0x01 0x00 0x01 0x19");
            result = StationBinaryTools.parse(data, 0x0b, 0x04);
            fail();
        } catch (IOException ex) {
            assertEquals("Invalid sub command: 2 <-> 4", ex.getMessage());
        }  
        
        try {
            data = StationBinaryTools.stringToByteArray("0xff 0xff 0x0b 0x00 0x08 0x04 0x01 0x00 0x00 0x19");
            result = StationBinaryTools.parse(data, 0x0b, 0x04);
            fail();
        } catch (IOException ex) {
            assertEquals("Payload crc does not match: 5 <-> 0", ex.getMessage());
        }  

        try {
            data = StationBinaryTools.stringToByteArray("0xff 0xff 0x0b 0x00 0x08 0x04 0x01 0x00 0x05 0x18");
            result = StationBinaryTools.parse(data, 0x0b, 0x04);
            fail();
        } catch (IOException ex) {
            assertEquals("Data crc does not match: 1d <-> 18", ex.getMessage());
        }  
        
        try {
            data = StationBinaryTools.stringToByteArray("0xff 0xff 0x0b 0x00 0x05 0x04 0x00 0x15");
            result = StationBinaryTools.parse(data, 0x0b, 0x04);
            fail();
        } catch (IOException ex) {
            assertEquals("Declared message length is to small: 5", ex.getMessage());
        }        
    }

    @Test
    public void testFrom2() throws IOException {
        byte[] data = stringToByteArray("0x00 0x01 0x7F 0xFF 0xFE 0x80");
        assertEquals(0, StationBinaryTools.fromByteSigned(data, 0));
        assertEquals(1, StationBinaryTools.fromByteSigned(data, 1));
        assertEquals(127, StationBinaryTools.fromByteSigned(data, 2));
        assertEquals(-1, StationBinaryTools.fromByteSigned(data, 3));
        assertEquals(-2, StationBinaryTools.fromByteSigned(data, 4));
        assertEquals(-128, StationBinaryTools.fromByteSigned(data, 5));
    
        data = stringToByteArray("0x00 0x00 0x00 0x01 0x00 0xda 0x01 0xFF 0x7F 0xFF 0xFF 0xFF 0xFA 0x00 0x80 0x01 0x80 0x00");
        assertEquals(0, StationBinaryTools.fromTwoBytesSigned(data, 0));
        assertEquals(1, StationBinaryTools.fromTwoBytesSigned(data, 2));
        assertEquals(218, StationBinaryTools.fromTwoBytesSigned(data, 4));
        assertEquals(511, StationBinaryTools.fromTwoBytesSigned(data, 6));
        assertEquals(32767, StationBinaryTools.fromTwoBytesSigned(data, 8));
        assertEquals(-1, StationBinaryTools.fromTwoBytesSigned(data, 10));
        assertEquals(-1536, StationBinaryTools.fromTwoBytesSigned(data, 12));
        assertEquals(-32767, StationBinaryTools.fromTwoBytesSigned(data, 14));
        assertEquals(-32768, StationBinaryTools.fromTwoBytesSigned(data, 16));
        
        assertEquals(0, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0x00 0x00 0x00 0x00"), 0));
        assertEquals(1, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0x00 0x00 0x00 0x01"), 0));
        assertEquals(255, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0x00 0x00 0x00 0xFF"), 0));
        assertEquals(256, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0x00 0x00 0x01 0x00"), 0));
        assertEquals(65535, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0x00 0x00 0xFF 0xFF"), 0));
        assertEquals(65536, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0x00 0x01 0x00 0x00"), 0));
        assertEquals(16777215, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0x00 0xFF 0xFF 0xFF"), 0));
        assertEquals(16777216, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0x01 0x00 0x00 0x00"), 0));
        assertEquals(2147483647, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0x7F 0xFF 0xFF 0xFF"), 0));
    
        assertEquals(-1, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0xFF 0xFF 0xFF 0xFF"), 0));
        assertEquals(-2, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0xFF 0xFF 0xFF 0xFE"), 0));
        assertEquals(-256, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0xFF 0xFF 0xFF 0x00"), 0));
        assertEquals(-257, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0xFF 0xFF 0xFE 0xFF"), 0));
        assertEquals(-65536, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0xFF 0xFF 0x00 0x00"), 0));
        assertEquals(-65537, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0xFF 0xFE 0xFF 0xFF"), 0));
        assertEquals(-16777216, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0xFF 0x00 0x00 0x00"), 0));
        assertEquals(-16777217, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0xFE 0xFF 0xFF 0xFF"), 0));    
        assertEquals(-2147483648, StationBinaryTools.fromFourBytesSigned(stringToByteArray("0x80 0x00 0x00 0x00"), 0));    
    }
}
